{"version":3,"sources":["components/SectionTitle/SectionTitle.js","components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Notification/Notification.js","App.js","reportWebVitals.js","index.js","components/FeedbackOptions/FeedbackOptions.module.scss"],"names":["SectionTitle","title","children","FeedbackOptions","options","onLeaveFeedback","map","option","className","styles","button","type","onClick","name","Statistics","GOOD","NEUTRAL","BAD","total","positivePercentage","Notification","message","App","useState","setGood","setNeutral","setBad","countTotalFeedback","setCountTotalFeedback","countPositiveFeedbackPercentage","setCountPositiveFeedbackPercentage","useEffect","Math","round","e","target","prevState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"+OAeeA,EAZM,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACnB,gCACE,6BAAKD,IACJC,M,gBCqBUC,EAvBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,6BACGD,EAAQE,KAAI,SAACC,GAAD,OACX,wBACEC,UAAWC,IAAOC,OAClBC,KAAK,SACLC,QAASP,EAETQ,KAAMN,EALR,SAOGA,GAHIA,SCSAO,EAlBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,+BACE,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,KACV,wCAAWC,KACX,qDAAwBC,EAAxB,WCEWC,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,6BAAKA,KCKC,SAASC,IACtB,MAAwBC,mBAAS,GAAjC,mBAAOR,EAAP,KAAaS,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOP,EAAP,KAAgBS,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAON,EAAP,KAAYS,EAAZ,KACA,EAAoDH,mBAAS,GAA7D,mBAAOI,EAAP,KAA2BC,EAA3B,KACA,EACEL,mBAAS,GADX,mBAAOM,EAAP,KAAwCC,EAAxC,KA6BA,OAPAC,qBAAU,WACRH,EAAsBb,EAAOC,EAAUC,GACvCa,EACEE,KAAKC,MAAc,IAAPlB,GAAeA,EAAOC,EAAUC,OAE7C,CAACF,EAAMC,EAASC,IAGjB,gCACE,cAAC,EAAD,CAAShB,MAAM,wBAAf,SACE,cAAC,EAAD,CACEG,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBA/Bc,SAAC6B,GACrB,OAAQA,EAAEC,OAAOtB,MACf,IAAK,OACHW,GAAQ,SAACY,GAAD,OAAeA,EAAY,KACnC,MAEF,IAAK,UACHX,GAAW,SAACW,GAAD,OAAeA,EAAY,KACtC,MAEF,IAAK,MACHV,GAAO,SAACU,GAAD,OAAeA,EAAY,KAClC,MAEF,QACE,aAoBF,cAAC,EAAD,CAASnC,MAAM,aAAf,SACG0B,EAAqB,EACpB,cAAC,EAAD,CACEZ,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOS,EACPR,mBAAoBU,IAGtB,cAAC,EAAD,CAAcR,QAAQ,2BC9DhC,IAYegB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC1B,EAAD,MAEF2B,SAASC,eAAe,SAG1Bb,K,kBCbAc,EAAOC,QAAU,CAAC,OAAS,gCAAgC,QAAU,oC","file":"static/js/main.133530ca.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst SectionTitle = ({ title, children }) => (\n  <div>\n    <h2>{title}</h2>\n    {children}\n  </div>\n);\n\nSectionTitle.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.object.isRequired,\n};\n\nexport default SectionTitle;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./FeedbackOptions.module.scss\";\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <ul>\n      {options.map((option) => (\n        <button\n          className={styles.button}\n          type=\"button\"\n          onClick={onLeaveFeedback}\n          key={option}\n          name={option}\n        >\n          {option}\n        </button>\n      ))}\n    </ul>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string.isRequired),\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Statistics = ({ GOOD, NEUTRAL, BAD, total, positivePercentage }) => (\n  <ul>\n    <li>GOOD: {GOOD}</li>\n    <li>NEUTRAL: {NEUTRAL}</li>\n    <li>BAD: {BAD}</li>\n    <li>Total:{total}</li>\n    <li>Positive feedback: {positivePercentage}%</li>\n  </ul>\n);\n\nStatistics.propTypes = {\n  GOOD: PropTypes.number.isRequired,\n  NEUTRAL: PropTypes.number.isRequired,\n  BAD: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Notification = ({ message }) => {\n  return <h4>{message}</h4>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","// import React, { Component } from \"react\";\n\nimport { useState, useEffect } from \"react\";\n\nimport Section from \"./components/SectionTitle\";\nimport FeedbackOptions from \"./components/FeedbackOptions\";\nimport Statistics from \"./components/Statistics\";\nimport Notification from \"./components/Notification\";\n\nexport default function App() {\n  const [GOOD, setGood] = useState(0);\n  const [NEUTRAL, setNeutral] = useState(0);\n  const [BAD, setBad] = useState(0);\n  const [countTotalFeedback, setCountTotalFeedback] = useState(0);\n  const [countPositiveFeedbackPercentage, setCountPositiveFeedbackPercentage] =\n    useState(0);\n\n  const leaveFeedback = (e) => {\n    switch (e.target.name) {\n      case \"GOOD\":\n        setGood((prevState) => prevState + 1);\n        break;\n\n      case \"NEUTRAL\":\n        setNeutral((prevState) => prevState + 1);\n        break;\n\n      case \"BAD\":\n        setBad((prevState) => prevState + 1);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  useEffect(() => {\n    setCountTotalFeedback(GOOD + NEUTRAL + BAD);\n    setCountPositiveFeedbackPercentage(\n      Math.round((GOOD * 100) / (GOOD + NEUTRAL + BAD))\n    );\n  }, [GOOD, NEUTRAL, BAD]);\n\n  return (\n    <div>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={[\"GOOD\", \"NEUTRAL\", \"BAD\"]}\n          onLeaveFeedback={leaveFeedback}\n        />\n      </Section>\n\n      <Section title=\"Statistics\">\n        {countTotalFeedback > 0 ? (\n          <Statistics\n            GOOD={GOOD}\n            NEUTRAL={NEUTRAL}\n            BAD={BAD}\n            total={countTotalFeedback}\n            positivePercentage={countPositiveFeedbackPercentage}\n          />\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </Section>\n    </div>\n  );\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"modern-normalize/modern-normalize.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button___DBNm\",\"glowing\":\"FeedbackOptions_glowing__2ZNzw\"};"],"sourceRoot":""}